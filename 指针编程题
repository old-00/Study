程序设计题(要求用指针的方法完成)
1.编写程序，将一个字符串反向存放(编写函数实现)
#include <stdio.h>
#include <string.h>
void str_recover(char *p, int j)
{
    int i = 0;
    char temp;
    j--;
    while (i < j)
    {
        temp = p[i];
        p[i] = p[j];
        p[j] = temp;
        i++;
        j--;
    }
}
int main(int argc, char const *argv[])
{
    char str1[128] = "";
    fgets(str1, sizeof(str1), stdin);
    str1[strlen(str1) - 1] = '\0';
    int i = 0;
    while (str1[i] && ++i)
        ;
    char *p = NULL;
    p = str1;
    str_recover(p, i);
    printf("%s\n", p);

    return 0;
}

2.编写程序my_strlen(char *str)，测得指定字符串的长度(编写函数实现)
#include <stdio.h>
#include <string.h>

int str_len(char *p)
{
    int i = 0;
    while (p[i] && ++i)
        ;
    return i;
}
int main(int argc, char const *argv[])
{
    char str1[128] = "";
    fgets(str1, sizeof(str1), stdin);
    str1[strlen(str1) - 1] = '\0';

    char *p = str1;
    int ret = str_len(p);
    printf("输入字符串的长度为：%d\n", ret);
    return 0;
}

3.编写一个字符串拷贝函数，my_strcpy(char *dest,char *src)(编写函数实现)
将源操作数src中的字符串拷贝到dest所指向的数组中
#include <stdio.h>
#include <string.h>
void my_strcopy(char *str1, char *str2)
{
    int i = 0;
    while (str1[i])
    {
        str2[i] = str1[i];
        i++;
    }
    str2[i] = '\0';
}
int main(int argc, char const *argv[])
{
    char str1[128] = "";
    char str2[128] = "";
    fgets(str1, sizeof(str1), stdin);
    str1[strlen(str1) - 1] = '\0';

    char *p1 = str1;
    char *p2 = str2;
    my_strcopy(p1, p2);
    printf("%s\n", str2);
    return 0;
}

4.编写一个函数实现将"12345"变成十进制12345(编写函数实现)
#include <stdio.h>
#include <string.h>
void turn_ten(char *str, int *num)
{
    int tmp = '1' - 1;
    int i = 0;
    while (str[i])
    {
        num[i] = str[i] - tmp;
        i++;
    }
}
int main(int argc, char const *argv[])
{
    char str1[128] = "";
    fgets(str1, sizeof(str1), stdin);
    str1[strlen(str1) - 1] = '\0';
    int num1[128] = {0};
    char *p1 = str1;
    int *p2 = num1;
    int n = 0;
    while (p1[n] && ++n)
        ;
    turn_ten(p1, p2);
    for (int i = 0; i < n; i++)
    {
        printf("%d", p2[i]);
    }
    return 0;
}


5.编写函数my_strcmp(char *str1, char  *str2)，比较、返回两等长字符串的大小(编写函数实现)
要求相等返回0，字符串1大于字符串2返回1，字符串2大于字符串1返回-1
字符串1的第一个字母大于字符串2的第一个字母，则判定字符串1大于字符串2，相等则比较第二字母，以此类推，全部相同则判定两字符串相等
#include <stdio.h>
#include <string.h>
int my_strcmp(char *str1, char *str2)
{
    int count = 0;
    int i = 0;
    while (str2[count] && ++count)
        ;
    for (i = 0; i < count; i++)
    {
        if (str1[i] > str2[i])
            return 1;
        if (str1[i] < str2[i])
            return -1;
    }
    if (i == count)
        return 0;
    else
        return -1234;
}

int main(int argc, char const *argv[])
{
    char str1[128] = "";
    char str2[128] = "helloworld!";
    fgets(str1, sizeof(str1), stdin);
    str1[strlen(str1) - 1] = '\0';

    char *p1 = str1;
    char *p2 = str2;
    int ret = my_strcmp(p1, p2);
    printf("%d\n", ret);
    return 0;
}


设计一个计算器，可以进行加、减、乘、除运算。
要求从键盘输入指令及操作数，如：
add 15 25		//计算15+25的值，并返回结果
sub 25 15		//计算25+15的值，并返回结果
mux 3  5		//计算 3+ 5的值，并返回结果
div 25 5 		//计算25+ 5的值，并返回结果
提示：
1.scanf("%s %d %d",name,a,b);
2. 用字符串比较函数strcmp
在 C 语言中，strcmp 函数用于比较两个字符串。它的返回值是：

0：表示两个字符串相等。
小于 0：表示第一个字符串小于第二个字符串（按字典序）。
大于 0：表示第一个字符串大于第二个字符串（按字典序）。
#include <stdio.h>
#include <string.h>

int add(int a, int b)
{
    return a + b;
}

int sub(int a, int b)
{
    return a - b;
}

int mux(int a, int b)
{
    return a * b;
}

int dive(int a, int b)
{
    return a / b;
}

int mod(int a, int b)
{
    return a % b;
}
int main(int argc, char const *argv[])
{
    int a = 0;
    int b = 0;
    int result = 0;
    char cmd[5] = "";

    while (1)
    {
        printf("please input cmd and num:\n");

        scanf("%s %d %d", cmd, &a, &b);
        if (strcmp(cmd, "add") == 0)
            result = add(a, b);
        else if (strcmp(cmd, "sub") == 0)
            result = sub(a, b);
        else if (strcmp(cmd, "mux") == 0)
            result = mux(a, b);
        else if (strcmp(cmd, "div") == 0)
            result = dive(a, b);
        else if (strcmp(cmd, "mod") == 0)
            result = mod(a, b);
        else
        {
            printf("输入有误！\n");
            continue;
        }
        printf("result = %d\n", result);
    }

    return 0;
}


2、编写一个函数实现将一个字符串中的第一个空格和最后一个空格去掉，
比如："ab cde f gh k"，去掉后变成"abcde f ghk"
**-------------------做法1：只用到复制函数-------------------**
#include <stdio.h>
#include <string.h>
char *my_strcopy(char *str, char *src)
{
    char *p = str;
    while (*str++ = *src++) // 遇到\0不复制 循环复制 直到\0为止
        ;
    return p; // 返回最初的地址
}
int main(int argc, char const *argv[])
{
    char str[128] = "abc def ghi jk";
    fgets(str, sizeof(str), stdin);
    char *p = str;
    // 去掉第一个空格
    while ((*p != '\0') && (*p != ' '))
        p++;
    if (*p != '\0')
        my_strcopy(p, p + 1);

    // 去掉第二个空格
    p = str + strlen(str); // 指针定位到str末尾
    while ((*p != ' ') && (p != str))
        p--;
    if ((*p != '\0') && (p != str))
        my_strcopy(p, p + 1);
    printf("%s", str);
    return 0;
}

**-------------------做法2：全部封装成函数-------------------**
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
void char_del(char *str1)
{
    char *str2 = str1;
    char *str3 = str2;
    while(*str1!=' '&&*str1!='\0') str1++;
    if(*str1!='\0')
    {
        char *src_bengin = str1+1;
        while(*str1++ = *src_bengin++);
    }
    int site = 0;
    while(*str2++&&++site);
    char *src_end = str2 +site;
    while(*src_end != ' '&&src_end!=str3)src_end--;
    if(*src_end!='\0'&&src_end!=str3)
    {
        char *tmp = src_end+1;
        while(*src_end++= *tmp++);
    }
}
int main()
{
    char str[128] = "";
    fgets(str,sizeof(str),stdin);
    str[strlen(str)-1] = '\0';
    char *p = str;
    char_del(p);
    printf("%s",p);
    return 0;
}

3、使用sscanf读取#和@之间的字符串 abc#def@ghi
   使用sscanf读取"ti:简单爱]" ":"号与"]"之间的内容
   使用sscanf读取"[02:06.85]"  02（代表分钟）06（代表秒）到整形变量 minute、second中

4、以下为我们的手机收到的短信的格式，请利用指针数组与strtok函数对其解析
	char msg_src[]={"+CMGR:REC UNREAD,+8613466630259,98/10/01,18:22:11+00,ABCdefGHI"};

	解析结果：
	日期：98/10/01
	时间：18:22:11
	发件人：13466630259
	内容：ABCdefGHI
	
	参考以下的函数名字以及参数，完成相应的要求
	int msg_deal(char *msg_src, char *msg_done[],char *str)
	参数1：待切割字符串的首地址
	参数2：指针数组：存放切割完字符串的首地址
	参数3：切割字符
	返回值：切割的字符串总数量



